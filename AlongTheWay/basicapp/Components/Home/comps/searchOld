 render() {
         let marker = null;
         let MoreStops = null;
         let location = null;
         let SearchBarInput = null;

         if (stopCount > 1) {
           //Creates marker and has callout for info on marker
           marker = (
             <Marker
               coordinate = {this.state.pointCoords[this.state.pointCoords.length - 1]}>
               <MapView.Callout
                    style = {styles.popup}

                    >
                      <View style = {styles.insideOfPopup}>
                            <Text style = {styles.nameText} >

                                Hello

                            </Text>
                     </View>
             </MapView.Callout>
             </Marker>
           );



           SearchBarInput = (
                            <View>
                              <TextInput
                                   placeholder="Enter destination..."
                                   style={styles.Stops}
                                   value={this.state.destination}
                                   clearButtonMode="always"
                                   onChangeText={destination => {
                                   console.log(destination);
                                   this.setState({ destination });
                                   this.onChangeDestinationDebounced(destination);
                                                  }}
                              />


                            </View>
                               );

            //Component to add more stops
         MoreStops = (

                    <TouchableOpacity style = {styles.stopButton}
                    onPress = {() => {SearchBarInput}  }
                    >
                          <Text>  Add Stop </Text>
                    </TouchableOpacity>
         );

         }

         const predictions = this.state.predictions.map(prediction => (
           <TouchableHighlight
             onPress={() =>{
               this.getRouteDirections(
                 prediction.place_id,
                 prediction.description
               );
               stopCount++;
                 this.sendBack();
               }


             }
             key={prediction.id}
           >
             <View>
               <Text style={styles.suggestions}>
                 {prediction.description}
               </Text>
             </View>
           </TouchableHighlight>
         ));



         // predictiontwo;



         return (
           <View style={styles.container}>
             <MapView
               ref={map => {
                 this.map = map;
               }}
               style={styles.map}
                         region={{
                           latitude: this.state.latitude,
                           longitude: this.state.longitude,
                           latitudeDelta: 0.015,
                           longitudeDelta: 0.0121
                         }}
                         showsUserLocation={true}

             >
               <Polyline
                 coordinates={this.state.pointCoords}
                 strokeWidth={4}
                 strokeColor="red"
               />

               {marker}
             </MapView>

             <TextInput
               placeholder="Enter destination..."
               style={styles.destinationInput}
               value={this.state.destination}
               clearButtonMode="always"
               onChangeText={destination => {
                 console.log(destination);
                 this.setState({ destination });
                 this.onChangeDestinationDebounced(destination);
               }}

             />
             {SearchBarInput}

             {predictions}
             {/*predictionsTwo*/}

             {MoreStops}


           </View>
         );
       }